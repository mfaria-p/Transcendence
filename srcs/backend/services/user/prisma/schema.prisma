// prisma/schema.prisma

generator client {
  provider = "prisma-client"
  output = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

model Profile {
  id            String   @id
  email         String   @unique
  name          String   @unique
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  friendshipsA  Friendship[]    @relation("FriendshipsA")
  friendshipsB  Friendship[]    @relation("FriendshipsB")

  sentRequests  FriendRequest[] @relation("SentRequests")
  recvRequests  FriendRequest[] @relation("RecvRequests")

  blocksMade    Block[]         @relation("BlocksMade")
  blocksRecv    Block[]         @relation("BlocksRecv")
}

model FriendRequest {
  id         String               @id @default(cuid())
  fromUserId String
  toUserId   String
  status     FriendRequestStatus  @default(PENDING)
  message    String?
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  fromUser   Profile @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     Profile @relation("RecvRequests", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([toUserId, status])
  @@index([fromUserId, status])
}

model Friendship {
  id        String   @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())

  // userAId < userBId
  userA     Profile @relation("FriendshipsA", fields: [userAId], references: [id], onDelete: Cascade)
  userB     Profile @relation("FriendshipsB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@index([createdAt])
}

model Block {
  id         String   @id @default(cuid())
  blockerId  String
  blockedId  String
  reason     String?
  createdAt  DateTime @default(now())

  blocker    Profile @relation("BlocksMade", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked    Profile @relation("BlocksRecv", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
}
